" Use the Jellybeans colour scheme
color jellybeans

" Only wait 100ms before processing certain commands
set timeoutlen=500

" Backspace should delete whole tabs at the beginning of a line
set smarttab

" And at the end of a line, too
set sts=2

" Hit return to clear search highlighting
noremap <CR> :nohlsearch<CR>

" ^L for a hashrocket
imap <c-l> <space>=><space>

" Allow Cmd-Enter to work like in TextMate
inoremap <D-CR> <ESC>o

" :W isn't bound to anything anyway (thanks Gary Bernhardt)
command! W :w

" CtrlP stuff
map <leader>gv :ClearCtrlPCache<cr>\|:CtrlP app/views<cr>
map <leader>gc :ClearCtrlPCache<cr>\|:CtrlP app/controllers<cr>
map <leader>gm :ClearCtrlPCache<cr>\|:CtrlP app/models<cr>
map <leader>gh :ClearCtrlPCache<cr>\|:CtrlP app/helpers<cr>
map <leader>gl :ClearCtrlPCache<cr>\|:CtrlP lib<cr>
map <leader>gp :ClearCtrlPCache<cr>\|:CtrlP public<cr>
map <leader>f :ClearCtrlPCache<cr>\|:CtrlP<cr>
map <leader>F :ClearCtrlPCache<cr>\|:CtrlP %%<cr>

function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  if match(a:filename, '\.feature$') != -1
    exec ":!bundle exec cucumber " . a:filename
  else
    if filereadable("script/spec")
      exec ":!script/spec " . a:filename
    else
      if has('gui_running')
        exec ":!bundle exec rspec --no-colour " . a:filename
      else
        exec ":!bundle exec rspec " . a:filename
      end
    end
  end
endfunction

function! SetTestFile()
  " Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
  if in_test_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" f5 removes trailing whitespace
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

" RABL files are just plain Ruby files
au BufNewFile,BufRead *.rabl set filetype=ruby

" Make ; do the same thing as :
nnoremap ; :

" List files from top to bottom in CtrlP
let g:ctrlp_match_window_reversed = 0

" Set the maximum height of the match window:
let g:ctrlp_max_height = 25

" CtrlP shouldn't manage the current directory
let g:ctrlp_working_path_mode = 0

" Exclude version control directories:
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" Set statusline to something sensible
set statusline=%f\ [%{strlen(&fenc)?&fenc:'none'},%{&ff}]%y%h%m%r%=%c,%l/%L\ %P
